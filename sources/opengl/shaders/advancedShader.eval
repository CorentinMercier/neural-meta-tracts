#version 450

#define PI 3.14159265

layout (quads, /*equal_spacing*/fractional_even_spacing, ccw) in;
layout (location = 0) in vec4 contColor[];
layout (location = 1) in vec2 contAb[];
layout (location = 2) in vec3 contEllipseOrientation[];

uniform mat4 camera_modelview;
uniform mat4 camera_projection;

uniform bool colorFromOrientation;
uniform bool neighbors;

uniform float geometricSize;

layout (location = 0) out vec4 evalColor;
layout (location = 1) out vec3 n;
layout (location = 2) out vec3 p;

void main(void)
{
    float  u = gl_TessCoord.x;
    float  v = gl_TessCoord.y;

//Param√®tres de l'ellipse
    vec2 ab = u*contAb[1]*geometricSize + (1.0f-u)*contAb[2]*geometricSize;
    float a = ab.x;//1.0f;
    float b = ab.y;//2.0f;

//Build elliptical profile
    float x = a * cos(v*2*PI);
    float y = b * sin(v*2*PI);
    float z = 0.0f;

    vec3 tangentCurve=normalize(vec3(u*(gl_in[2].gl_Position-gl_in[0].gl_Position)+(1.0f-u)*(gl_in[3].gl_Position-gl_in[1].gl_Position)));

    if (neighbors)
    {
        if (contColor[0].r<0.0f)
            evalColor = vec4(1.0, 0.0, 0.0, 1.0);
        else
        {
            float mean=(abs(tangentCurve).r+abs(tangentCurve).g+abs(tangentCurve).b)/3.0;
            evalColor = vec4(mean, mean, mean, 1.0);
        }
    }
    else
    {
        if (colorFromOrientation)
            evalColor = vec4(abs(tangentCurve), 1.0);
        else
            evalColor = contColor[0];
    }

    vec3 lastOrientation;
    if (dot(vec3(contEllipseOrientation[1]), vec3(contEllipseOrientation[2]))<0.0f)
        lastOrientation=vec3(-u*contEllipseOrientation[1]+(1.0f-u)*contEllipseOrientation[2]);
    else
        lastOrientation=vec3(u*contEllipseOrientation[1]+(1.0f-u)*contEllipseOrientation[2]);
    vec3 axeY=cross(tangentCurve, lastOrientation);
    mat3 rotation=mat3(lastOrientation.x, lastOrientation.y, lastOrientation.z,
                  axeY.x, axeY.y, axeY.z,
                  tangentCurve.x, tangentCurve.y, tangentCurve.z);

    vec4 center=u*gl_in[1].gl_Position+(1.0f-u)*gl_in[2].gl_Position;
    vec4 pos=vec4(rotation * vec3(x, y, z), 0.0f);

    //Pour une base circulaire :
    //    n=normalize(vec3(pos));
    
    //Pour une base elliptique :
    float xe=x*(1+b*b/(a*a));
    float ye=y*(1+a*a/(b*b));
    n=normalize(rotation*vec3(xe, ye,0.0));

    p=(camera_modelview*(pos+center)).xyz;
    gl_Position = camera_projection * camera_modelview * (pos+center);
}
